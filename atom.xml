<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WiseCoder</title>
  <icon>https://www.gravatar.com/avatar/a6d0e7f5775a7769d42cc4db72fb6b4b</icon>
  
  <link href="https://wisecoder.blog/atom.xml" rel="self"/>
  
  <link href="https://wisecoder.blog/"/>
  <updated>2021-02-07T13:33:35.243Z</updated>
  <id>https://wisecoder.blog/</id>
  
  <author>
    <name>盲侠花满楼</name>
    <email>wisecoder@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring 注解 @Value 快速使用指南</title>
    <link href="https://wisecoder.blog/2021/02/07/a-quick-guide-to-spring-annotation-value/"/>
    <id>https://wisecoder.blog/2021/02/07/a-quick-guide-to-spring-annotation-value/</id>
    <published>2021-02-07T01:02:50.000Z</published>
    <updated>2021-02-07T13:33:35.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p><code>@Value</code> 注解支持从 <code>Properties</code> 配置文件或者 <code>YAML</code> 配置文件中读取配置并注入到 <code>bean</code> 中，鉴于 <code>YAML</code> 配置的比 <code>Properties</code> 配置更有层次，功能也更强大，本文中均以 <code>YAML</code> 配置文件为例进行说明。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注入字面常量值</span></span><br><span class="line"><span class="meta">@Value(&quot;This is a literal string value&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String literalStringValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入配置文件中的值</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.string&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String stringValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定默认值，如果配置文件中找不到相应的 key，则使用默认值</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.string:defaultValue&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String stringValueWithDefaultValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定默认值为空字符串（即长度为 0 的字符串）</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.string:&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String stringValueWithDefaultEmptyString;</span><br></pre></td></tr></table></figure><p>注意：使用 <code>@Value</code> 注解的类必须是 Spring 管理的 bean，即：该类上面配置有下面任意一种注解：<code>@Component</code>, <code>@Service</code>, <code>@Controller</code>, <code>@RestController</code>, <code>@Configuration</code>.</p><h1 id="三种注入方式"><a href="#三种注入方式" class="headerlink" title="三种注入方式"></a>三种注入方式</h1><p>@Value 注解支持三种注入方式：实例属性、构造方法、setter 方法。</p><h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.string&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String stringValue;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String stringValue; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoComponent</span><span class="params">(<span class="meta">@Value(&quot;$&#123;demo-cfg.basic.string&#125;&quot;)</span> String stringValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stringValue = stringValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="setter-方法"><a href="#setter-方法" class="headerlink" title="setter 方法"></a>setter 方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String stringValue;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStringValue</span><span class="params">(<span class="meta">@Value(&quot;$&#123;demo-cfg.basic.string&#125;&quot;)</span> String stringValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stringValue = stringValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般推荐使用实例属性注入方式，比较简洁。</p><h1 id="初级用法"><a href="#初级用法" class="headerlink" title="初级用法"></a>初级用法</h1><p>由于字符串类型已经在基本用法中介绍过，此处不再赘述。下面对基本类型、包装类型、数组类型、List类型分别举例如何使用 <code>@Value</code> 注解。为了便于比对，采用三个 Tab页分别放置 Java代码、YAML配置、变量结果打印。Java变量结果打印的方法如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String name, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此处将 byte[] 数组中的 byte 转换成 int 类型后再打印，避免打印出的是乱码字符</span></span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="keyword">byte</span>[]) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = (<span class="keyword">byte</span>[]) value;</span><br><span class="line">        <span class="keyword">int</span>[] tempIntArray = <span class="keyword">new</span> <span class="keyword">int</span>[byteArray.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteArray.length; i++) &#123;</span><br><span class="line">            tempIntArray[i] = byteArray[i];</span><br><span class="line">        &#125;</span><br><span class="line">        value = tempIntArray;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125; = &#123;&#125;&quot;</span>, </span><br><span class="line">          StrUtil.padAfter(name, <span class="number">12</span>, StrUtil.C_SPACE), value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><div class="tabs" id="primitive-types"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#primitive-types-1">Java</button></li><li class="tab"><button type="button" data-href="#primitive-types-2">YAML</button></li><li class="tab"><button type="button" data-href="#primitive-types-3">Output</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="primitive-types-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.integer&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> integerValue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.integerHex&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> integerHex;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.integerOct&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> integerOct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.integerBin&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> integerBin;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.long&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> longValue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.float&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> floatValue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.double&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> doubleValue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.char&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">char</span> charValue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.byte&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">byte</span> byteValue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.short&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">short</span> shortValue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.boolean&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> booleanValue;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="primitive-types-2"><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">demo-cfg:</span></span><br><span class="line">  <span class="attr">basic:</span></span><br><span class="line">    <span class="attr">integer:</span> <span class="number">12345</span></span><br><span class="line">    <span class="attr">integerHex:</span> <span class="number">0xABCDE</span>       <span class="comment"># 十六进制整数</span></span><br><span class="line">    <span class="attr">integerOct:</span> <span class="number">012345</span>        <span class="comment"># 八进制整数</span></span><br><span class="line">    <span class="attr">integerBin:</span> <span class="string">0b11001100</span>    <span class="comment"># 二进制整数</span></span><br><span class="line">    <span class="attr">long:</span> <span class="number">0xCAFEBABE</span>          <span class="comment"># 十六进制整数</span></span><br><span class="line">    <span class="attr">float:</span> <span class="number">123.456</span></span><br><span class="line">    <span class="attr">double:</span> <span class="number">12.3456789</span></span><br><span class="line">    <span class="attr">char:</span> <span class="string">a</span></span><br><span class="line">    <span class="attr">byte:</span> <span class="number">68</span></span><br><span class="line">    <span class="attr">short:</span> <span class="number">12345</span></span><br><span class="line">    <span class="attr">boolean:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="primitive-types-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">integerValue = <span class="number">12345</span></span><br><span class="line">integerHex   = <span class="number">703710</span></span><br><span class="line">integerOct   = <span class="number">5349</span></span><br><span class="line">integerBin   = <span class="number">204</span></span><br><span class="line">longValue    = <span class="number">3405691582</span></span><br><span class="line">floatValue   = <span class="number">123.456</span></span><br><span class="line">doubleValue  = <span class="number">12.3456789</span></span><br><span class="line">charValue    = a</span><br><span class="line">byteValue    = <span class="number">68</span></span><br><span class="line">shortValue   = <span class="number">12345</span></span><br><span class="line">booleanValue = <span class="keyword">true</span></span><br></pre></td></tr></table></figure></div></div></div><p><strong>注意：</strong>对于基本类型，如果配置中相应的 <code>key</code> 不存在，那么 <code>@Value</code> 注解中必须要指定默认值，否则会报错；或者即使相应的 <code>key</code> 存在，但是对应的 <code>value</code> 没有设置或格式错误，也会报错。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.integer:16888&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> integerValue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.float:1.23&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> floatValue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.boolean:true&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> booleanValue;</span><br></pre></td></tr></table></figure><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><div class="tabs" id="wrapper-classes"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#wrapper-classes-1">Java</button></li><li class="tab"><button type="button" data-href="#wrapper-classes-2">YAML</button></li><li class="tab"><button type="button" data-href="#wrapper-classes-3">Output</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="wrapper-classes-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.integer&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer integerWrapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.long&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long longWrapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.float&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Float floatWrapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.double&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Double doubleWrapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.char&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Character charWrapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.byte&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Byte byteWrapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.short&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Short shortWrapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.basic.boolean&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Boolean booleanWrapper;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="wrapper-classes-2"><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">demo-cfg:</span></span><br><span class="line">  <span class="attr">basic:</span></span><br><span class="line">    <span class="attr">integer:</span> <span class="number">12345</span></span><br><span class="line">    <span class="attr">long:</span> <span class="number">0xCAFEBABE</span>          <span class="comment"># 十六进制整数</span></span><br><span class="line">    <span class="attr">float:</span> <span class="number">123.456</span></span><br><span class="line">    <span class="attr">double:</span> <span class="number">12.3456789</span></span><br><span class="line">    <span class="attr">char:</span> <span class="string">a</span></span><br><span class="line">    <span class="attr">byte:</span> <span class="number">68</span></span><br><span class="line">    <span class="attr">short:</span> <span class="number">12345</span></span><br><span class="line">    <span class="attr">boolean:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="wrapper-classes-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">integerWrapper = <span class="number">12345</span></span><br><span class="line">longWrapper    = <span class="number">3405691582</span></span><br><span class="line">floatWrapper   = <span class="number">123.456</span></span><br><span class="line">doubleWrapper  = <span class="number">12.3456789</span></span><br><span class="line">charWrapper    = a</span><br><span class="line">byteWrapper    = <span class="number">68</span></span><br><span class="line">shortWrapper   = <span class="number">12345</span></span><br><span class="line">booleanWrapper = <span class="keyword">true</span></span><br></pre></td></tr></table></figure></div></div></div><p><strong>注意：</strong>与基本类型一样，如果配置中相应的 <code>key</code> 不存在，那么 <code>@Value</code> 注解中必须要指定默认值，否则会报错；但当 <code>key</code> 对应的 <code>value</code> 值设置为空（空字符串或者空白字符）时，包装类型的值为 <code>null</code>.</p><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><div class="tabs" id="array-types"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#array-types-1">Java</button></li><li class="tab"><button type="button" data-href="#array-types-2">YAML</button></li><li class="tab"><button type="button" data-href="#array-types-3">Output</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="array-types-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.string&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String[] stringArray;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.integer&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] integerArray;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.long&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span>[] longArray;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.float&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span>[] floatArray;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.double&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span>[] doubleArray;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.char&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">char</span>[] charArray;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.byte&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] byteArray;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.short&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">short</span>[] shortArray;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.boolean&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span>[] booleanArray;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="array-types-2"><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">demo-cfg:</span></span><br><span class="line">  <span class="attr">advanced:</span></span><br><span class="line">    <span class="attr">array:</span></span><br><span class="line">      <span class="attr">string:</span> <span class="string">Big</span> <span class="string">Bang</span> <span class="string">Theory,</span> <span class="string">Sheldon</span> <span class="string">Cooper</span></span><br><span class="line">      <span class="attr">integer:</span> <span class="number">1234</span><span class="string">,</span> <span class="number">56789</span></span><br><span class="line">      <span class="attr">long:</span> <span class="number">0xCAFEBABE</span><span class="string">,</span> <span class="number">0xDEADBEEF</span></span><br><span class="line">      <span class="attr">float:</span> <span class="number">1.2</span><span class="string">,</span> <span class="number">3.45</span><span class="string">,</span> <span class="number">6.789</span></span><br><span class="line">      <span class="attr">double:</span> <span class="number">1.23456789</span><span class="string">,</span> <span class="number">2.3456789</span><span class="string">,</span> <span class="number">3.45678912345</span></span><br><span class="line">      <span class="attr">char:</span> <span class="string">abc</span></span><br><span class="line">      <span class="attr">byte:</span> <span class="number">-12</span><span class="string">,</span> <span class="number">67</span><span class="string">,</span> <span class="number">89</span></span><br><span class="line">      <span class="attr">short:</span> <span class="number">12345</span><span class="string">,</span> <span class="number">23456</span><span class="string">,</span> <span class="number">32767</span></span><br><span class="line">      <span class="attr">boolean:</span> <span class="literal">true</span><span class="string">,</span> <span class="literal">false</span><span class="string">,</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="array-types-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stringArray  = [Big Bang Theory, Sheldon Cooper]</span><br><span class="line">integerArray = [<span class="number">1234</span>, <span class="number">56789</span>]</span><br><span class="line">longArray    = [<span class="number">3405691582</span>, <span class="number">3735928559</span>]</span><br><span class="line">floatArray   = [<span class="number">1.2</span>, <span class="number">3.45</span>, <span class="number">6.789</span>]</span><br><span class="line">doubleArray  = [<span class="number">1.23456789</span>, <span class="number">2.3456789</span>, <span class="number">3.45678912345</span>]</span><br><span class="line">charArray    = [a, b, c]</span><br><span class="line">byteArray    = [-<span class="number">12</span>, <span class="number">67</span>, <span class="number">89</span>]</span><br><span class="line">shortArray   = [<span class="number">12345</span>, <span class="number">23456</span>, <span class="number">32767</span>]</span><br><span class="line">booleanArray = [<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">true</span>]</span><br></pre></td></tr></table></figure></div></div></div><p><strong>注意：</strong>数组元素类型也可以是包装类型。另外，数组类型配置的值默认是由逗号分隔符（英文半角）进行分隔，逗号分隔符前后可以有若干空白字符，不会影响解析。如果希望分隔符是其它符号，则需要用到高级用法中的 <code>SpEL</code>，参见后面高级用法之 <a href="#%E4%BD%BF%E7%94%A8-Spring-%E8%A1%A8%E8%BE%BE%E5%BC%8F-SpEL">使用 Spring 表达式 SpEL</a> 。</p><p><strong>例外：</strong><code>char[]</code> 类型的数组，配置值不能是逗号分隔的如 “a, b, c” 这样的值，否则注入进来得到的 <code>char[]</code> 是一个长度为 7 的数组，其值为 <code>[&#39;a&#39;, &#39;,&#39;, &#39; &#39;, &#39;b&#39;, &#39;,&#39;, &#39; &#39;, &#39;c&#39;]</code>，即中间的逗号和空格都被算作一个 <code>char</code> 注入 <code>char[]</code> 数组中了。对于包装类型数组 <code>Character[]</code> 和下面的 <code>List</code> 类型 <code>List&lt;Character&gt;</code>, 其值仍然是用逗号分隔。</p><h2 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h2><p>与数组类型类似，只是 <code>List</code> 类型的元素类型只支持包装类型，不支持基本类型。</p><div class="tabs" id="array-types"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#array-types-1">Java</button></li><li class="tab"><button type="button" data-href="#array-types-2">YAML</button></li><li class="tab"><button type="button" data-href="#array-types-3">Output</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="array-types-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.string&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; stringList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.integer&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; integerList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.long&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Long&gt; longList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.float&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Float&gt; floatList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.double&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Double&gt; doubleList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.char&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Character&gt; charList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.byte&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Byte&gt; byteList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.short&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Short&gt; shortList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;demo-cfg.advanced.array.boolean&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Boolean&gt; booleanList;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="array-types-2"><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">demo-cfg:</span></span><br><span class="line">  <span class="attr">advanced:</span></span><br><span class="line">    <span class="attr">array:</span></span><br><span class="line">      <span class="attr">string:</span> <span class="string">Big</span> <span class="string">Bang</span> <span class="string">Theory,</span> <span class="string">Sheldon</span> <span class="string">Cooper</span></span><br><span class="line">      <span class="attr">integer:</span> <span class="number">1234</span><span class="string">,</span> <span class="number">56789</span></span><br><span class="line">      <span class="attr">long:</span> <span class="number">0xCAFEBABE</span><span class="string">,</span> <span class="number">0xDEADBEEF</span></span><br><span class="line">      <span class="attr">float:</span> <span class="number">1.2</span><span class="string">,</span> <span class="number">3.45</span><span class="string">,</span> <span class="number">6.789</span></span><br><span class="line">      <span class="attr">double:</span> <span class="number">1.23456789</span><span class="string">,</span> <span class="number">2.3456789</span><span class="string">,</span> <span class="number">3.45678912345</span></span><br><span class="line">      <span class="attr">char:</span> <span class="string">a,</span> <span class="string">b,</span> <span class="string">c</span></span><br><span class="line">      <span class="attr">byte:</span> <span class="number">-12</span><span class="string">,</span> <span class="number">67</span><span class="string">,</span> <span class="number">89</span></span><br><span class="line">      <span class="attr">short:</span> <span class="number">12345</span><span class="string">,</span> <span class="number">23456</span><span class="string">,</span> <span class="number">32767</span></span><br><span class="line">      <span class="attr">boolean:</span> <span class="literal">true</span><span class="string">,</span> <span class="literal">false</span><span class="string">,</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="array-types-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stringList   = [Big Bang Theory, Sheldon Cooper]</span><br><span class="line">integerList  = [<span class="number">1234</span>, <span class="number">56789</span>]</span><br><span class="line">longList     = [<span class="number">3405691582</span>, <span class="number">3735928559</span>]</span><br><span class="line">floatList    = [<span class="number">1.2</span>, <span class="number">3.45</span>, <span class="number">6.789</span>]</span><br><span class="line">doubleList   = [<span class="number">1.23456789</span>, <span class="number">2.3456789</span>, <span class="number">3.45678912345</span>]</span><br><span class="line">charList     = [a, b, c]</span><br><span class="line">byteList     = [-<span class="number">12</span>, <span class="number">67</span>, <span class="number">89</span>]</span><br><span class="line">shortList    = [<span class="number">12345</span>, <span class="number">23456</span>, <span class="number">32767</span>]</span><br><span class="line">booleanList  = [<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">true</span>]</span><br></pre></td></tr></table></figure></div></div></div><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="使用-Spring-表达式-SpEL"><a href="#使用-Spring-表达式-SpEL" class="headerlink" title="使用 Spring 表达式 SpEL"></a>使用 Spring 表达式 SpEL</h2><div class="tabs" id="array-types"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#array-types-1">Java</button></li><li class="tab"><button type="button" data-href="#array-types-2">YAML</button></li><li class="tab"><button type="button" data-href="#array-types-3">Output</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="array-types-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非默认逗号分隔符</span></span><br><span class="line"><span class="comment">// 通过 SpEL 表达式对配置字符串值进行 split 操作</span></span><br><span class="line"><span class="comment">// split 方法的参数为正则表达式 \s*__\s*</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;&#x27;$&#123;demo-cfg.advanced.spel.short&#125;&#x27;.split(&#x27;\\s*__\\s*&#x27;)&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Short&gt; shortListSpEL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以直接注入某个系统属性的值</span></span><br><span class="line"><span class="comment">// 如果该系统属性没有被定义，则最终 priority 的值为 null</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;priority&#x27;]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer priority;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SpEL 表达式也可以指定系统属性未定义时的默认值</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;priority&#x27;] ?: &#x27;123&#x27;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer priorityWithDefault;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="array-types-2"><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">demo-cfg:</span></span><br><span class="line">  <span class="attr">advanced:</span></span><br><span class="line">    <span class="attr">spel:</span></span><br><span class="line">      <span class="attr">short:</span> <span class="number">12345</span>  <span class="string">__</span> <span class="number">23456</span>   <span class="string">__</span>   <span class="number">32767</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="array-types-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">shortListSpEL       = [<span class="number">12345</span>, <span class="number">23456</span>, <span class="number">32767</span>]</span><br><span class="line">priority            = <span class="keyword">null</span></span><br><span class="line">priorityWithDefault = <span class="number">123</span></span><br></pre></td></tr></table></figure></div></div></div><h2 id="利用-SpEL-注入-Map"><a href="#利用-SpEL-注入-Map" class="headerlink" title="利用 SpEL 注入 Map"></a>利用 SpEL 注入 Map</h2><div class="tabs" id="array-types"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#array-types-1">Java</button></li><li class="tab"><button type="button" data-href="#array-types-2">YAML</button></li><li class="tab"><button type="button" data-href="#array-types-3">Output</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="array-types-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;$&#123;demo-cfg.advanced.spel.map&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; configMap;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="array-types-2"><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">demo-cfg:</span></span><br><span class="line">  <span class="attr">advanced:</span></span><br><span class="line">    <span class="attr">spel:</span></span><br><span class="line">      <span class="attr">map:</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">        host: &quot;192.168.88.168&quot;,</span></span><br><span class="line"><span class="string">        port: &quot;3306&quot;,</span></span><br><span class="line"><span class="string">        username: &quot;Sheldon&quot;,</span></span><br><span class="line"><span class="string">        password: &quot;Cooper&quot;</span></span><br><span class="line"><span class="string">      &#125;&#x27;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="array-types-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configMap = &#123;host=<span class="number">192.168</span><span class="number">.88</span><span class="number">.168</span>, port=<span class="number">3306</span>, username=Sheldon, password=Cooper&#125;</span><br></pre></td></tr></table></figure></div></div></div><p><strong>注意：</strong>YAML 配置中 <code>map</code> 类型的值必须是 <code>JSON</code> 格式的字符串（最外层的引号为单引号或双引号都可以，外层为单引号，则 <code>JSON</code> 内部用双引号，反之亦然）。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文对 <code>Spring</code> 的 <code>@Value</code> 注解的使用进行了比较完整的介绍，初级用法中分别对基本类型、包装类型、数组类型、List 类型的注入给出了示例，高级用法中对 <code>@Value</code> 注解中如何使用 <code>SpEL</code> 表达式进行了简单介绍。</p>]]></content>
    
    
    <summary type="html">快速了解 Spring 注解 @Value 的使用。@Value 注解用于将字面值或配置文件中的值注入到 Spring 管理的 bean 的字段中，支持三种注入方式：实例属性、构造方法、setter 方法。</summary>
    
    
    
    <category term="后端开发" scheme="https://wisecoder.blog/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Spring" scheme="https://wisecoder.blog/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Spring/"/>
    
    
    <category term="Spring Basics" scheme="https://wisecoder.blog/tags/Spring-Basics/"/>
    
  </entry>
  
  <entry>
    <title>在 Debian 10 和 CentOS 7 中使用阿里云镜像源安装最新版 Docker</title>
    <link href="https://wisecoder.blog/2021/01/28/install-docker-ce-in-debian10-and-centos7-utilizing-aliyun-mirrors/"/>
    <id>https://wisecoder.blog/2021/01/28/install-docker-ce-in-debian10-and-centos7-utilizing-aliyun-mirrors/</id>
    <published>2021-01-27T20:10:00.000Z</published>
    <updated>2021-02-06T08:43:39.848Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning flat"><p>如果之前有安装过旧版本的 Docker (<code>docker</code>, <code>docker.io</code>, <code>docker-engine</code>)，要先卸载后才能安装最新版 Docker。</p></div><div class="note info flat"><p>本文撰写时 Debian 的版本为 <code>10.7</code>，CentOS 的版本为 <code>7.9.2009</code>，Docker的版本为 <code>20.10.2</code>。操作系统 或者 Docker 版本不同时，操作过程可能会略有差异。<strong>Debian 和 CentOS 命令不同时，分别在各自的 Tab页分开显示。</strong></p></div><div class="note info flat"><p>出于安全性考虑，一般不用 <code>root</code> 用户直接进行操作，而是给普通用户授予 <code>sudo</code> 权限，在命令前面加上 <code>sudo</code> 来临时提升权限。用 <code>root</code> 用户执行以下命令（用实际的用户名替换 <code>$USER_NAME</code>）即可给普通用户授予 <code>sudo</code> 权限。</p></div><div class="tabs" id="make-user-sudo"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#make-user-sudo-1">Debian 10</button></li><li class="tab"><button type="button" data-href="#make-user-sudo-2">CentOS 7</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="make-user-sudo-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># usermod -aG sudo $USER_NAME</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="make-user-sudo-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># usermod -aG wheel $USER_NAME</span></span><br></pre></td></tr></table></figure></div></div></div><h1 id="卸载旧版本的-Docker"><a href="#卸载旧版本的-Docker" class="headerlink" title="卸载旧版本的 Docker"></a>卸载旧版本的 Docker</h1><div class="tabs" id="uninstall-old-version"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#uninstall-old-version-1">Debian 10</button></li><li class="tab"><button type="button" data-href="#uninstall-old-version-2">CentOS 7</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="uninstall-old-version-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt remove docker \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker.io \</span><br><span class="line">                  containerd \</span><br><span class="line">                  runc</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="uninstall-old-version-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></div></div></div><div class="note info flat"><p>如果您的系统之前没有安装过旧版本的 Docker，则无需执行上述卸载命令，即便执行了也没有任何副作用，只是会提示所卸载的包不存在。</p></div><div class="note info flat"><p><strong>注意：</strong>上述卸载命令并不会删除路径 <code>/var/lib/docker/</code>下的内容，此路径下所包含的 Docker 数据（镜像、容器、卷、网络）可以在新版 Docker下继续使用。最新版 Docker 的安装包名为 <code>docker-ce</code>.</p></div><h1 id="从阿里云镜像源安装-Docker"><a href="#从阿里云镜像源安装-Docker" class="headerlink" title="从阿里云镜像源安装 Docker"></a>从阿里云镜像源安装 Docker</h1><h2 id="安装必要的系统工具"><a href="#安装必要的系统工具" class="headerlink" title="安装必要的系统工具"></a>安装必要的系统工具</h2><div class="tabs" id="install-essential-utils"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#install-essential-utils-1">Debian 10</button></li><li class="tab"><button type="button" data-href="#install-essential-utils-2">CentOS 7</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="install-essential-utils-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install -y \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="install-essential-utils-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y \</span><br><span class="line">    yum-utils \</span><br><span class="line">    device-mapper-persistent-data \</span><br><span class="line">    lvm2</span><br></pre></td></tr></table></figure></div></div></div><h2 id="安装-GPG-证书"><a href="#安装-GPG-证书" class="headerlink" title="安装 GPG 证书"></a>安装 GPG 证书</h2><div class="tabs" id="install-essential-utils"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#install-essential-utils-1">Debian 10</button></li><li class="tab"><button type="button" data-href="#install-essential-utils-2">CentOS 7</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="install-essential-utils-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL \</span><br><span class="line">  https://mirrors.aliyun.com/docker-ce/linux/debian/gpg \</span><br><span class="line">  | sudo apt-key add -</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="install-essential-utils-2"><div class="note info disabled"><p>CentOS 7 不需要安装 GPG 证书</p></div></div></div></div><h2 id="添加软件源信息"><a href="#添加软件源信息" class="headerlink" title="添加软件源信息"></a>添加软件源信息</h2><div class="tabs" id="install-essential-utils"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#install-essential-utils-1">Debian 10</button></li><li class="tab"><button type="button" data-href="#install-essential-utils-2">CentOS 7</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="install-essential-utils-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">    <span class="string">&quot;deb [arch=amd64] \</span></span><br><span class="line"><span class="string">    https://mirrors.aliyun.com/docker-ce/linux/debian \</span></span><br><span class="line"><span class="string">    <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="install-essential-utils-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></div></div></div><h2 id="更新并安装-Docker"><a href="#更新并安装-Docker" class="headerlink" title="更新并安装 Docker"></a>更新并安装 Docker</h2><div class="tabs" id="install-essential-utils"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#install-essential-utils-1">Debian 10</button></li><li class="tab"><button type="button" data-href="#install-essential-utils-2">CentOS 7</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="install-essential-utils-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install -y \</span><br><span class="line">    docker-ce \</span><br><span class="line">    docker-ce-cli \</span><br><span class="line">    containerd.io</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="install-essential-utils-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br><span class="line">$ sudo yum install -y \</span><br><span class="line">    docker-ce \</span><br><span class="line">    docker-ce-cli \</span><br><span class="line">    containerd.io</span><br></pre></td></tr></table></figure></div></div></div><h2 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h2><div class="tabs" id="install-essential-utils"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#install-essential-utils-1">Debian 10</button></li><li class="tab"><button type="button" data-href="#install-essential-utils-2">CentOS 7</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="install-essential-utils-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run --rm hello-world</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="install-essential-utils-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br><span class="line">$ sudo docker run --rm hello-world</span><br></pre></td></tr></table></figure></div></div></div><p>如果命令运行后没有报错，且在控制台打印出 hello world 相关的信息，则表明 Docker 已被正确安装。</p><h2 id="设置普通用户直接运行-docker"><a href="#设置普通用户直接运行-docker" class="headerlink" title="设置普通用户直接运行 docker"></a>设置普通用户直接运行 docker</h2><p>非 <code>root</code> 用户做如下配置后，就不用在运行 <code>docker</code> 命令时在前面加上 <code>sudo</code> 了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo group add docker</span><br><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">$ newgrp docker</span><br></pre></td></tr></table></figure><p>然后，用不带 sudo 的 docker 命令验证一下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --rm hello-world</span><br></pre></td></tr></table></figure><h2 id="配置-Docker-开机自启动"><a href="#配置-Docker-开机自启动" class="headerlink" title="配置 Docker 开机自启动"></a>配置 Docker 开机自启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> containerd.service</span><br></pre></td></tr></table></figure><h1 id="配置阿里云镜像加速器"><a href="#配置阿里云镜像加速器" class="headerlink" title="配置阿里云镜像加速器"></a>配置阿里云镜像加速器</h1><p>因为网络原因，从 Docker 官方源下载比较大的镜像可能会需要很长的时间，甚至下载失败，好在阿里云容器 Hub 服务提供了官方的镜像站点加速官方镜像的下载速度。使用阿里云的镜像加速器，可以提升获取 Docker 官方镜像的速度。关于加速器的地址，需要先注册阿里云账号，并登录 <a href="https://cr.console.aliyun.com/">容器镜像服务</a> 的控制台，左侧边栏点击 <strong>镜像中心 =&gt; 镜像加速器</strong>，右侧就会显示为你独立分配的加速地址，以及不同系统的配置方法。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir -p /etc/docker</span><br><span class="line">$ sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://**xxxxxxxx**.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>到此就算是全部配置完成了，以后再下载 docker 镜像就不会像以前那样慢了。</p>]]></content>
    
    
    <summary type="html">Linux发行版自带的 Docker版本一般都比较旧，本文介绍在 Debian 10 和 CentOS 7 中使用阿里云镜像源来安装最新版 Docker，以解决从官方源安装可能会比较慢的问题。</summary>
    
    
    
    <category term="云计算" scheme="https://wisecoder.blog/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    <category term="Docker" scheme="https://wisecoder.blog/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/Docker/"/>
    
    
    <category term="Debian" scheme="https://wisecoder.blog/tags/Debian/"/>
    
    <category term="CentOS" scheme="https://wisecoder.blog/tags/CentOS/"/>
    
  </entry>
  
</feed>
